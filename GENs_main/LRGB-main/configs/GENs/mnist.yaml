out_dir: results
metric_best: accuracy
wandb:
  use: True
  project: MNIST
  entity: expand-gnns
dataset:
  format: PyG-GNNBenchmarkDataset
  name: MNIST
  task: graph
  task_type: classification
  transductive: False
  node_encoder: True
  node_encoder_name: LinearNode+EquivStableLapPE
  node_encoder_bn: False
  edge_encoder: True
  edge_encoder_name: LinearEdge
  edge_encoder_bn: False
prep:
  exp: True
  exp_deg: 5 # Algorithm will use 5 permutations or 5 Hamiltonian cycles, so actual degree will be 10
  add_edge_index: True # Set True if you want to add real edges beside expander edges
  num_virt_node: 1 # Set True if you want to add global node connections beside expander edges
posenc_EquivStableLapPE:
  enable: True
  eigen:
    laplacian_norm: none
    eigvec_norm: L2
    max_freqs: 8
  raw_norm_type: none
train:
  mode: custom
  batch_size: 32 # 16<32
  eval_period: 1
  ckpt_period: 100
model:
  type: custom_gnn
  loss_fun: cross_entropy
  edge_decoding: dot
  graph_pooling: add
gnn:
  head: san_graph
  layers_pre_mp: 0
  layers_mp: 8
  layers_post_mp: 2
  dim_inner: 56 # `gt.dim_hidden` must match `gnn.dim_inner`
  batchnorm: True
  act: relu
  dropout: 0.2 #0.2>0.1
  residual: True
  agg: mean
  normalize_adj: False
  layer_type: gensconv
  init_res: False
  init_res_ratio: 0.0
  gens:
    hop_att: True
    K: 4
    gamma: 1.0
    fea_drop: simple
    base_model: gat
    concat: False
    heads: 4 #
    edge_dim: 56 #
    att_dropout: 0.0
    use_ffN: False
    diff_alpha: False
    norm_type: None
optim: #98.00
  clip_grad_norm: True
  optimizer: adamW
  weight_decay: 0.0
  base_lr: 0.001
  max_epoch: 300
  scheduler: cosine_with_warmup
  num_warmup_epochs: 5